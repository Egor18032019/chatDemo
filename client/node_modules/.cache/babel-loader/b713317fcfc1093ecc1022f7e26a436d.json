{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Teacher\\\\Documents\\\\GitHub\\\\SimbirSoftInt\\\\client\\\\src\\\\StompClient.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SockJS = () => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [value, setValue] = useState('');\n  const socket = useRef();\n  const [connected, setConnected] = useState(false);\n  const [username, setUsername] = useState('');\n\n  function connect() {\n    console.log(\"SockJS\");\n\n    let StompJs = require('@stomp/stompjs');\n\n    let Stomp = StompJs.Stomp;\n    Stomp.WebSocketClass = require('Websocket').w3cwebsocket;\n    console.log(StompJs);\n    console.log(StompJs.Stomp);\n    console.log(StompJs.Client);\n    var client = Stomp.over(function () {\n      return new WebSocket('ws://localhost:15674/ws');\n    });\n    socket.current = client;\n    socket.current.onConnect();\n    socket.current.connect({}, onConnected, onError);\n\n    function onError(error) {\n      console.warn(\"onError\");\n      console.log(\"onError\");\n    }\n\n    function onConnected() {\n      // Subscribe to the Public Topic\n      console.log(\"onConnect \");\n      setConnected(true);\n      socket.current.subscribe('/topic/public', onMessageReceived); // socket.current.activate();\n      // Tell your username to the server\n\n      socket.current.send(\"/app/chat.addUser\", {}, JSON.stringify({\n        sender: username,\n        type: 'JOIN'\n      }));\n    }\n\n    socket.current.onmessage = event => {\n      const message = JSON.parse(event.data);\n      setMessages(prev => [message, ...prev]);\n    };\n\n    socket.current.onclose = () => {\n      console.log('Socket закрыт');\n    };\n\n    socket.current.onerror = () => {\n      console.log('Socket произошла ошибка');\n    };\n  }\n\n  const sendMessage = async () => {\n    const message = {\n      username,\n      sender: username,\n      message: value,\n      content: value,\n      id: Date.now(),\n      event: 'message',\n      type: 'CHAT'\n    };\n    socket.current.send(\"/app/chat.sendMessage\", {}, JSON.stringify(message));\n    setValue('');\n  };\n\n  function onMessageReceived(payload) {\n    console.log(payload);\n    var message = JSON.parse(payload.body);\n  }\n\n  if (!connected) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          type: \"text\",\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448\\u0435 \\u0438\\u043C\\u044F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connect,\n          children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: value,\n          onChange: e => setValue(e.target.value),\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map(mess => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: mess.event === 'connection' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connection_message\",\n            children: [\"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \", mess.username, \" \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u043B\\u0441\\u044F\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 35\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\",\n            children: [mess.username, \". \", mess.message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 35\n          }, this)\n        }, mess.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SockJS, \"3cT4WsfcDEqSZabjdtTXiO9x12k=\");\n\n_c = SockJS;\nexport default SockJS;\n\nvar _c;\n\n$RefreshReg$(_c, \"SockJS\");","map":{"version":3,"sources":["C:/Users/Teacher/Documents/GitHub/SimbirSoftInt/client/src/StompClient.jsx"],"names":["React","useRef","useState","SockJS","messages","setMessages","value","setValue","socket","connected","setConnected","username","setUsername","connect","console","log","StompJs","require","Stomp","WebSocketClass","w3cwebsocket","Client","client","over","WebSocket","current","onConnect","onConnected","onError","error","warn","subscribe","onMessageReceived","send","JSON","stringify","sender","type","onmessage","event","message","parse","data","prev","onclose","onerror","sendMessage","content","id","Date","now","payload","body","e","target","map","mess"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\r\n\r\nconst SockJS = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [value, setValue] = useState('');\r\n    const socket = useRef()\r\n    const [connected, setConnected] = useState(false);\r\n    const [username, setUsername] = useState('')\r\n\r\n    function connect() {\r\n        console.log(\"SockJS\")\r\n        let StompJs = require('@stomp/stompjs');\r\n        let Stomp = StompJs.Stomp;\r\n        Stomp.WebSocketClass = require('Websocket').w3cwebsocket;\r\n        console.log(StompJs)\r\n        console.log(StompJs.Stomp)\r\n        console.log(StompJs.Client)\r\n        var client = Stomp.over(function(){\r\n                    return new WebSocket('ws://localhost:15674/ws')\r\n                });\r\n \r\n        socket.current = client\r\n \r\n        socket.current.onConnect()\r\n        socket.current.connect({}, onConnected, onError);\r\n\r\n        function onError(error) {\r\n            console.warn(\"onError\")\r\n            console.log(\"onError\")\r\n        }\r\n\r\n\r\n        function onConnected() {\r\n            // Subscribe to the Public Topic\r\n            console.log(\"onConnect \")\r\n            setConnected(true)\r\n            socket.current.subscribe('/topic/public', onMessageReceived);\r\n\r\n            // socket.current.activate();\r\n\r\n            // Tell your username to the server\r\n            socket.current.send(\"/app/chat.addUser\",\r\n                {},\r\n                JSON.stringify({ sender: username, type: 'JOIN' })\r\n            )\r\n\r\n        }\r\n\r\n        socket.current.onmessage = (event) => {\r\n            const message = JSON.parse(event.data)\r\n            setMessages(prev => [message, ...prev])\r\n        }\r\n        socket.current.onclose = () => {\r\n            console.log('Socket закрыт')\r\n        }\r\n        socket.current.onerror = () => {\r\n            console.log('Socket произошла ошибка')\r\n        }\r\n    }\r\n    const sendMessage = async () => {\r\n        const message = {\r\n            username,\r\n            sender: username,\r\n            message: value,\r\n            content: value,\r\n            id: Date.now(),\r\n            event: 'message',\r\n            type: 'CHAT'\r\n        }\r\n        socket.current.send(\"/app/chat.sendMessage\", {}, JSON.stringify(message));\r\n\r\n        setValue('')\r\n    }\r\n    function onMessageReceived(payload) {\r\n        console.log(payload)\r\n        var message = JSON.parse(payload.body);\r\n    }\r\n\r\n    if (!connected) {\r\n        return (\r\n            <div className=\"center\">\r\n                <div className=\"form\">\r\n                    <input\r\n                        value={username}\r\n                        onChange={e => setUsername(e.target.value)}\r\n                        type=\"text\"\r\n                        placeholder=\"Введите ваше имя\" />\r\n                    <button onClick={connect}>Войти</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <div>\r\n                <div className=\"form\">\r\n                    <input value={value} onChange={e => setValue(e.target.value)} type=\"text\" />\r\n                    <button onClick={sendMessage}>Отправить</button>\r\n                </div>\r\n                <div className=\"messages\">\r\n                    {messages.map(mess =>\r\n                        <div key={mess.id}>\r\n                            {mess.event === 'connection'\r\n                                ? <div className=\"connection_message\">\r\n                                    Пользователь {mess.username} подключился\r\n                                </div>\r\n                                : <div className=\"message\">\r\n                                    {mess.username}. {mess.message}\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SockJS;"]},"metadata":{},"sourceType":"module"}