{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Teacher\\\\Documents\\\\GitHub\\\\typesExpress\\\\client\\\\src\\\\EventSourcing.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EventSourcing = () => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [value, setValue] = useState('');\n  const [username, setUsername] = useState(false);\n  const nameRef = React.useRef(null);\n  let flag = false;\n  useEffect(() => {\n    subscribe();\n  }, []);\n\n  const subscribe = async () => {\n    /*\r\n    встроенный класс EventSource используется для получения серверных событий (Server-sent events).\r\n     Только для событий в формате text/event-stream без закрытия соединения.\r\n     Если нам нужно получать поток данных с сервера: неважно, сообщения в чате или же цены для магазина\r\n     – с этим легко справится EventSource. \r\n     К тому же, он поддерживает автоматическое переподключение при потере соединения, \r\n     которое, используя WebSocket, нам бы пришлось реализовывать самим. \r\n     Кроме того, используется старый добрый HTTP, а не новый протокол.\r\n    */\n    const eventSource = new EventSource(`http://localhost:5000/connect`);\n\n    eventSource.onmessage = function (event) {\n      const message = JSON.parse(event.data);\n\n      if (!flag) {\n        setMessages(prev => [...message, ...prev]);\n        flag = true;\n      } else {\n        setMessages(prev => [message, ...prev]);\n      }\n    };\n  };\n\n  const sendMessage = async () => {\n    await axios.post('http://localhost:5000/new-messages', {\n      message: value,\n      id: Date.now(),\n      name: username\n    });\n  };\n\n  if (!username) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          defaultValue: \"\",\n          ref: nameRef,\n          type: \"text\",\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448\\u0435 \\u0438\\u043C\\u044F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => {\n            setUsername(nameRef.current.value);\n            console.log(nameRef.current.value);\n          },\n          children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: value,\n          onChange: e => setValue(e.target.value),\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map(mess => {\n          // console.log(messages)\n          console.log(mess);\n          console.log(mess.name + \": \" + mess.message + \" \" + mess.id);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\",\n            children: mess.name + \": \" + mess.message + \" \"\n          }, mess.id ? mess.id : mess._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EventSourcing, \"X0+ep3yu9rIWm0E+ECNtvK9TvN8=\");\n\n_c = EventSourcing;\nexport default EventSourcing;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventSourcing\");","map":{"version":3,"sources":["C:/Users/Teacher/Documents/GitHub/typesExpress/client/src/EventSourcing.jsx"],"names":["React","useEffect","useState","useRef","axios","EventSourcing","messages","setMessages","value","setValue","username","setUsername","nameRef","flag","subscribe","eventSource","EventSource","onmessage","event","message","JSON","parse","data","prev","sendMessage","post","id","Date","now","name","e","current","console","log","target","map","mess","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMU,OAAO,GAAGZ,KAAK,CAACG,MAAN,CAAa,IAAb,CAAhB;AACA,MAAIU,IAAI,GAAG,KAAX;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,SAAS,GAAG,YAAY;AAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,UAAMC,WAAW,GAAG,IAAIC,WAAJ,CAAiB,+BAAjB,CAApB;;AACAD,IAAAA,WAAW,CAACE,SAAZ,GAAwB,UAAUC,KAAV,EAAiB;AACrC,YAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,IAAjB,CAAhB;;AACA,UAAI,CAACT,IAAL,EAAW;AACPN,QAAAA,WAAW,CAACgB,IAAI,IAAI,CAAC,GAAGJ,OAAJ,EAAa,GAAGI,IAAhB,CAAT,CAAX;AACAV,QAAAA,IAAI,GAAG,IAAP;AACH,OAHD,MAIK;AACDN,QAAAA,WAAW,CAACgB,IAAI,IAAI,CAACJ,OAAD,EAAU,GAAGI,IAAb,CAAT,CAAX;AACH;AACJ,KATD;AAUH,GArBD;;AAuBA,QAAMC,WAAW,GAAG,YAAY;AAC5B,UAAMpB,KAAK,CAACqB,IAAN,CAAW,oCAAX,EAAiD;AACnDN,MAAAA,OAAO,EAAEX,KAD0C;AAEnDkB,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EAF+C;AAGnDC,MAAAA,IAAI,EAAEnB;AAH6C,KAAjD,CAAN;AAKH,GAND;;AAOA,MAAI,CAACA,QAAL,EAAe;AACX,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AACI,UAAA,YAAY,EAAE,EADlB;AAEI,UAAA,GAAG,EAAEE,OAFT;AAGI,UAAA,IAAI,EAAC,MAHT;AAII,UAAA,WAAW,EAAC;AAJhB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI;AAAQ,UAAA,OAAO,EAAEkB,CAAC,IAAI;AAClBnB,YAAAA,WAAW,CAACC,OAAO,CAACmB,OAAR,CAAgBvB,KAAjB,CAAX;AACAwB,YAAAA,OAAO,CAACC,GAAR,CAAYrB,OAAO,CAACmB,OAAR,CAAgBvB,KAA5B;AACH,WAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAeH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,2BACI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAO,UAAA,KAAK,EAAEA,KAAd;AAAqB,UAAA,QAAQ,EAAEsB,CAAC,IAAIrB,QAAQ,CAACqB,CAAC,CAACI,MAAF,CAAS1B,KAAV,CAA5C;AAA8D,UAAA,IAAI,EAAC;AAAnE;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,OAAO,EAAEgB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,kBACKlB,QAAQ,CAAC6B,GAAT,CAAaC,IAAI,IAAI;AAClB;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,IAAI,CAACP,IAAL,GAAY,IAAZ,GAAmBO,IAAI,CAACjB,OAAxB,GAAkC,GAAlC,GAAwCiB,IAAI,CAACV,EAAzD;AACA,8BACI;AAAK,YAAA,SAAS,EAAC,SAAf;AAAA,sBACKU,IAAI,CAACP,IAAL,GAAY,IAAZ,GAAmBO,IAAI,CAACjB,OAAxB,GAAkC;AADvC,aAA8BiB,IAAI,CAACV,EAAL,GAAUU,IAAI,CAACV,EAAf,GAAoBU,IAAI,CAACC,GAAvD;AAAA;AAAA;AAAA;AAAA,kBADJ;AAIH,SARA;AADL;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CAhFD;;GAAMhC,a;;KAAAA,a;AAkFN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport axios from \"axios\";\r\n\r\nconst EventSourcing = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [value, setValue] = useState('');\r\n    const [username, setUsername] = useState(false);\r\n    const nameRef = React.useRef(null)\r\n    let flag = false\r\n    useEffect(() => {\r\n        subscribe()\r\n    }, [])\r\n\r\n    const subscribe = async () => {\r\n        /*\r\n        встроенный класс EventSource используется для получения серверных событий (Server-sent events).\r\n         Только для событий в формате text/event-stream без закрытия соединения.\r\n         Если нам нужно получать поток данных с сервера: неважно, сообщения в чате или же цены для магазина\r\n         – с этим легко справится EventSource. \r\n         К тому же, он поддерживает автоматическое переподключение при потере соединения, \r\n         которое, используя WebSocket, нам бы пришлось реализовывать самим. \r\n         Кроме того, используется старый добрый HTTP, а не новый протокол.\r\n        */\r\n        const eventSource = new EventSource(`http://localhost:5000/connect`)\r\n        eventSource.onmessage = function (event) {\r\n            const message = JSON.parse(event.data);\r\n            if (!flag) {\r\n                setMessages(prev => [...message, ...prev]);\r\n                flag = true\r\n            }\r\n            else {\r\n                setMessages(prev => [message, ...prev]);\r\n            }\r\n        }\r\n    }\r\n\r\n    const sendMessage = async () => {\r\n        await axios.post('http://localhost:5000/new-messages', {\r\n            message: value,\r\n            id: Date.now(),\r\n            name: username\r\n        })\r\n    }\r\n    if (!username) {\r\n        return (\r\n            <div className=\"center\">\r\n                <div className=\"form\">\r\n                    <input\r\n                        defaultValue={\"\"}\r\n                        ref={nameRef}\r\n                        type=\"text\"\r\n                        placeholder=\"Введите ваше имя\" />\r\n                    <button onClick={e => {\r\n                        setUsername(nameRef.current.value)\r\n                        console.log(nameRef.current.value)\r\n                    }}>Войти</button>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <div>\r\n                <div className=\"form\">\r\n                    <input value={value} onChange={e => setValue(e.target.value)} type=\"text\" />\r\n                    <button onClick={sendMessage}>Отправить</button>\r\n                </div>\r\n                <div className=\"messages\">\r\n                    {messages.map(mess => {\r\n                        // console.log(messages)\r\n                        console.log(mess)\r\n                        console.log(mess.name + \": \" + mess.message + \" \" + mess.id)\r\n                        return (\r\n                            <div className=\"message\" key={mess.id ? mess.id : mess._id}>\r\n                                {mess.name + \": \" + mess.message + \" \"}\r\n                            </div>)\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventSourcing;"]},"metadata":{},"sourceType":"module"}