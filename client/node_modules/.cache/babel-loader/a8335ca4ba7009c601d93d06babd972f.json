{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Teacher\\\\Documents\\\\GitHub\\\\typesExpress\\\\client\\\\src\\\\EventSourcing.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EventSourcing = () => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [value, setValue] = useState('');\n  useEffect(() => {\n    subscribe();\n  }, []);\n\n  const subscribe = async () => {\n    /*\r\n    встроенный класс EventSource используется для получения серверных событий (Server-sent events).\r\n     Только для событий в формате text/event-stream без закрытия соединения.\r\n     Если нам нужно получать поток данных с сервера: неважно, сообщения в чате или же цены для магазина\r\n     – с этим легко справится EventSource. \r\n     К тому же, он поддерживает автоматическое переподключение при потере соединения, \r\n     которое, используя WebSocket, нам бы пришлось реализовывать самим. \r\n     Кроме того, используется старый добрый HTTP, а не новый протокол.\r\n    */\n    const eventSource = new EventSource(`http://localhost:5000/connect`);\n\n    eventSource.onmessage = function (event) {\n      // console.log(event)\n      const message = JSON.parse(event.data);\n      setMessages(prev => [message, ...prev]);\n    };\n  };\n\n  const sendMessage = async () => {\n    await axios.post('http://localhost:5000/new-messages', {\n      message: value,\n      id: Date.now()\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: value,\n          onChange: e => setValue(e.target.value),\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map(mess => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          children: mess.message\n        }, mess.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EventSourcing, \"PAr9wcJJF3puSbFu20jqYlFdQ9A=\");\n\n_c = EventSourcing;\nexport default EventSourcing;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventSourcing\");","map":{"version":3,"sources":["C:/Users/Teacher/Documents/GitHub/typesExpress/client/src/EventSourcing.jsx"],"names":["React","useEffect","useState","axios","EventSourcing","messages","setMessages","value","setValue","subscribe","eventSource","EventSource","onmessage","event","message","JSON","parse","data","prev","sendMessage","post","id","Date","now","e","target","map","mess"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,SAAS,GAAG,YAAY;AAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,UAAMC,WAAW,GAAG,IAAIC,WAAJ,CAAiB,+BAAjB,CAApB;;AACAD,IAAAA,WAAW,CAACE,SAAZ,GAAwB,UAAUC,KAAV,EAAiB;AACrC;AACA,YAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,IAAjB,CAAhB;AACAX,MAAAA,WAAW,CAACY,IAAI,IAAI,CAACJ,OAAD,EAAU,GAAGI,IAAb,CAAT,CAAX;AACH,KAJD;AAKH,GAhBD;;AAkBA,QAAMC,WAAW,GAAG,YAAY;AAC5B,UAAMhB,KAAK,CAACiB,IAAN,CAAW,oCAAX,EAAiD;AACnDN,MAAAA,OAAO,EAAEP,KAD0C;AAEnDc,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL;AAF+C,KAAjD,CAAN;AAIH,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,2BACI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAO,UAAA,KAAK,EAAEhB,KAAd;AAAqB,UAAA,QAAQ,EAAEiB,CAAC,IAAIhB,QAAQ,CAACgB,CAAC,CAACC,MAAF,CAASlB,KAAV,CAA5C;AAA8D,UAAA,IAAI,EAAC;AAAnE;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,OAAO,EAAEY,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,kBACKd,QAAQ,CAACqB,GAAT,CAAaC,IAAI,iBACd;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,oBACKA,IAAI,CAACb;AADV,WAA8Ba,IAAI,CAACN,EAAnC;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAnDD;;GAAMjB,a;;KAAAA,a;AAqDN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from \"axios\";\r\n\r\nconst EventSourcing = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [value, setValue] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        subscribe()\r\n    }, [])\r\n\r\n    const subscribe = async () => {\r\n        /*\r\n        встроенный класс EventSource используется для получения серверных событий (Server-sent events).\r\n         Только для событий в формате text/event-stream без закрытия соединения.\r\n         Если нам нужно получать поток данных с сервера: неважно, сообщения в чате или же цены для магазина\r\n         – с этим легко справится EventSource. \r\n         К тому же, он поддерживает автоматическое переподключение при потере соединения, \r\n         которое, используя WebSocket, нам бы пришлось реализовывать самим. \r\n         Кроме того, используется старый добрый HTTP, а не новый протокол.\r\n        */\r\n        const eventSource = new EventSource(`http://localhost:5000/connect`)\r\n        eventSource.onmessage = function (event) {\r\n            // console.log(event)\r\n            const message = JSON.parse(event.data);\r\n            setMessages(prev => [message, ...prev]);\r\n        }\r\n    }\r\n\r\n    const sendMessage = async () => {\r\n        await axios.post('http://localhost:5000/new-messages', {\r\n            message: value,\r\n            id: Date.now()\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <div>\r\n                <div className=\"form\">\r\n                    <input value={value} onChange={e => setValue(e.target.value)} type=\"text\" />\r\n                    <button onClick={sendMessage}>Отправить</button>\r\n                </div>\r\n                <div className=\"messages\">\r\n                    {messages.map(mess =>\r\n                        <div className=\"message\" key={mess.id}>\r\n                            {mess.message}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventSourcing;"]},"metadata":{},"sourceType":"module"}