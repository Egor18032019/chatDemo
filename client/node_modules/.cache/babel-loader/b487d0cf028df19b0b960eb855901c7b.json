{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Teacher\\\\Documents\\\\GitHub\\\\SimbirSoftInt\\\\client\\\\src\\\\StompClient.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport SockJS from 'sockjs';\nimport Stomp from 'stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WebSock = () => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [value, setValue] = useState('');\n  const socket = useRef();\n  const stompClient = useRef();\n  const [connected, setConnected] = useState(false);\n  const [username, setUsername] = useState('');\n\n  function connect() {\n    socket.current = new SockJS('/ws');\n    stompClient.current = Stomp.over(socket);\n    stompClient.connect({}, onConnected, onError);\n    setConnected(true);\n  }\n\n  function onConnected() {\n    // Subscribe to the Public Topic\n    stompClient.subscribe('/topic/public', onMessageReceived); // Tell your username to the server\n\n    stompClient.send(\"/app/chat.addUser\", {}, JSON.stringify({\n      sender: username,\n      type: 'JOIN'\n    }));\n  }\n\n  function onMessageReceived(payload) {\n    var message = JSON.parse(payload.body);\n    setMessages(prev => [message, ...prev]);\n  }\n\n  function onError(error) {\n    console.log(\"Aaaaaaaaaaaaaaaaaaaa\");\n  }\n\n  const sendMessage = async () => {\n    const message = {\n      username,\n      message: value,\n      id: Date.now(),\n      event: 'message'\n    };\n    socket.current.send(JSON.stringify(message));\n    setValue('');\n  };\n\n  if (!connected) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          type: \"text\",\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448\\u0435 \\u0438\\u043C\\u044F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: connect,\n          children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: value,\n          onChange: e => setValue(e.target.value),\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map(mess => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: mess.event === 'connection' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connection_message\",\n            children: [\"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \", mess.username, \" \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0438\\u043B\\u0441\\u044F\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 35\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\",\n            children: [mess.username, \". \", mess.message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 35\n          }, this)\n        }, mess.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WebSock, \"9IDkZb9wbEzS9juopdrJAqqxMKM=\");\n\n_c = WebSock;\nexport default WebSock;\n\nvar _c;\n\n$RefreshReg$(_c, \"WebSock\");","map":{"version":3,"sources":["C:/Users/Teacher/Documents/GitHub/SimbirSoftInt/client/src/StompClient.jsx"],"names":["React","useRef","useState","SockJS","Stomp","WebSock","messages","setMessages","value","setValue","socket","stompClient","connected","setConnected","username","setUsername","connect","current","over","onConnected","onError","subscribe","onMessageReceived","send","JSON","stringify","sender","type","payload","message","parse","body","prev","error","console","log","sendMessage","id","Date","now","event","e","target","map","mess"],"mappings":"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","sourcesContent":["import React, {\r\n    useRef,\r\n    useState\r\n} from 'react';\r\nimport SockJS from 'sockjs'\r\nimport Stomp from 'stompjs'\r\nconst WebSock = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [value, setValue] = useState('');\r\n    const socket = useRef()\r\n    const stompClient = useRef()\r\n    const [connected, setConnected] = useState(false);\r\n    const [username, setUsername] = useState('')\r\n\r\n    function connect() {\r\n\r\n        socket.current = new SockJS('/ws');\r\n        stompClient.current = Stomp.over(socket);\r\n        stompClient.connect({}, onConnected, onError);\r\n        setConnected(true)\r\n    }\r\n\r\n    function onConnected() {\r\n        // Subscribe to the Public Topic\r\n        stompClient.subscribe('/topic/public', onMessageReceived);\r\n\r\n        // Tell your username to the server\r\n        stompClient.send(\"/app/chat.addUser\", {},\r\n            JSON.stringify({\r\n                sender: username,\r\n                type: 'JOIN'\r\n            })\r\n        )\r\n\r\n     }\r\n\r\n\r\n    function onMessageReceived(payload) {\r\n        var message = JSON.parse(payload.body);\r\n        setMessages(prev => [message, ...prev])\r\n\r\n    }\r\n\r\n\r\n\r\n    function onError(error) {\r\n        console.log(\"Aaaaaaaaaaaaaaaaaaaa\")\r\n    }\r\n\r\n\r\n    const sendMessage = async () => {\r\n        const message = {\r\n            username,\r\n            message: value,\r\n            id: Date.now(),\r\n            event: 'message'\r\n        }\r\n        socket.current.send(JSON.stringify(message));\r\n        setValue('')\r\n    }\r\n\r\n\r\n    if (!connected) {\r\n        return (\r\n            <div className=\"center\">\r\n                <div className=\"form\">\r\n                    <input\r\n                        value={username}\r\n                        onChange={e => setUsername(e.target.value)}\r\n                        type=\"text\"\r\n                        placeholder=\"Введите ваше имя\"/>\r\n                    <button onClick={connect}>Войти</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <div>\r\n                <div className=\"form\">\r\n                    <input value={value} onChange={e => setValue(e.target.value)} type=\"text\"/>\r\n                    <button onClick={sendMessage}>Отправить</button>\r\n                </div>\r\n                <div className=\"messages\">\r\n                    {messages.map(mess =>\r\n                        <div key={mess.id}>\r\n                            {mess.event === 'connection'\r\n                                ? <div className=\"connection_message\">\r\n                                    Пользователь {mess.username} подключился\r\n                                </div>\r\n                                : <div className=\"message\">\r\n                                    {mess.username}. {mess.message}\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default WebSock;"]},"metadata":{},"sourceType":"module"}